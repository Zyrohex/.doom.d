#+TITLE: config
Sync' after modifying this file!

* Personal identifications
Some functionality uses this to identify you, e.g. GPG configuration, email
clients, file templates and snippets.

#+BEGIN_SRC emacs-lisp
(setq user-full-name "Yu Shen (Aaron)"
      user-mail-address "yshen@bart.gov | yubrshen@gmail.com")
#+END_SRC

* Improve the resposiveness of shell with ssh

To improve on the responsiveness of shell with ssh:

#+BEGIN_SRC emacs-lisp
(setq-hook! '(shell-mode-hook eshell-mode-hook) company-idle-delay nil)
#+END_SRC
Here is the Discord convesation of the problem and solution. Eventually Henrik's solution works perfectly.

[6:34 PM] Aaron S: On another topic, I'm using a lot more ssh to virtual development box with Doom for ssh. But I found that with ssh, I cannot enable shell and eshell or use M-x shell or M-x eshell with ssh link to the remote, as there would be several seconds delay in the second character of a command, for example for ls, typing 'l' the response is immediate, but typing 's' the echo will be delayed by a few seconds. It works OK with M-x term, but I miss the command and file name completion with term. Can you recommend any remedy, or trade-off?
[7:00 PM] Henrik: @Aaron S turn off automatic code completion (company) in shell/eshell buffers, for starters
[7:00 PM] Henrik: (setq-hook! '(shell-mode-hook eshell-mode-hook) company-idle-delay nil)

* Setup for org-journal and related org-agenda-files for the workflow of org-journal as inbox
** org-journal setup

The settings to org-journal works well as of Mon Sep 28 20:07:26 2020.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/Dropbox/org/TODOs/tasks.org" "~/Dropbox/org/TODOs/projects.org"
                         "~/Dropbox/org/errors_orgmode_commits.org"))

(use-package! org-journal
  :after org
  :init
  (setq org-journal-dir "~/Dropbox/org/Daily/"
        org-journal-date-prefix "#+TITLE: "
        org-journal-file-format "%Y-%m-%d.org"
        org-journal-date-format "%A, %d %B %Y")
  :config
  (setq org-journal-find-file #'find-file-other-window )
  :bind
  ("C-c n j" . org-journal-new-entry)
  ("C-c n s" . evil-save-modified-and-close)
  :defer t
  )

(setq org-journal-enable-agenda-integration t)
#+END_SRC

The following was the old way to set the keybinging, no longer used, kept for example
  (map! :map org-journal-mode-map
        "C-c n s" #'evil-save-modified-and-close)
       
** Define org-agenda-custom commands

Note, to develop the agenda view, what matters is the value of
org-agenda-custom-commands computed below. Therefore, to experiement with a suitable
view, it's matter of experiement with the value. So, it's productive to experiment with a file or a buffer of
the value, and start agenda view SPC o A to test.

The following configuration customizes the view of agenda: (especially the title of agenda)

#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-start-day nil ;; i.e. today
      org-agenda-block-separator nil
      org-agenda-tags-column 100 ;; from testing this seems to be a good value
      org-agenda-compact-blocks t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-agenda-custom-commands
      '(("z" "Zen View"
         ((agenda "" ((org-agenda-span 'day)
                      (org-super-agenda-groups
                       '((:name "Today "
                                :time-grid t
                                :date today
                                :todo "TODAY"
                                :scheduled today
                                :order 1)
                        ;; (:discard (:anything t))
                        ))))
          (alltodo "" ((org-agenda-overriding-header "")
                       (org-super-agenda-groups
                        '((:name "Next"
                                 :todo "NEXT"
                                 :order 1)
                          (:name "Important"
                                 :tag "Important"
                                 :priority "A"
                                 :order 6)
                          (:name "Due Today"
                                 :deadline today
                                 :order 2)
                          (:name "Due Soon"
                                 :deadline future
                                 :order 8)
                          (:name "Overdue"
                                 :deadline past
                                 :order 7)
                          (:name "Church"
                                 :tag "church"
                                 :order 32)
                          (:name "BART"
                                 :tag "bart"
                                 :order 10)
                          (:name "Issues"
                                 :tag "Issue"
                                 :order 12)
                          (:name "Projects"
                                 :tag "Project"
                                 :order 14)
                          (:name "Emacs"
                                 :tag "Emacs"
                                 :order 13)
                          (:name "Research"
                                 :tag "Research"
                                 :order 15)
                          (:name "To read"
                                 :tag "Read"
                                 :order 30)
                          (:name "Waiting"
                                 :todo "WAITING"
                                 :order 20)
                          (:name "trivial"
                                 :priority<= "C"
                                 :tag ("Trivial" "Unimportant")
                                 :todo ("SOMEDAY" )
                                 :order 90)
                          ;; (:discard ;; (:tag ("Chore" "Routine" "Daily"))
                          ;;  (:anything t)
                          ;;  )
                          ))))
          ))))
#+END_SRC
      
* Vsiual Tweaks

** Fonts

 Doom exposes five (optional) variables for controlling fonts in Doom. Here
 are the three important ones:

 + `doom-font'
 + `doom-variable-pitch-font'
 + `doom-big-font' -- used for `doom-big-font-mode'; use this for
   presentations or streaming.

 They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
 font string. You generally only need these two:

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "Iosevka Term SS04" :size 16) ; 24
      doom-big-font (font-spec :family "Iosevka Term SSO4" :size 36)
            ;; doom-variable-pitch-font (font-spec :family "ETBembo" :size 24)
            ;; doom-serif-font (font-spec :family "ETBembo" :size 24)
            )

#+END_SRC

Past settings
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
       doom-variable-pitch-font (font-spec :family "sans" :size 13))

;; (setq doom-font (font-spec :family "Attribute Mono" :size 20))
;; (unless (find-font doom-font)
;;   (setq doom-font (font-spec :family "FuraCode Nerd Font" :size 20)))

;; (setq doom-unicode-font (font-spec :name "DejaVu Sans Mono" :size 20))
** Theme

 There are two ways to load a theme. Both assume the theme is installed and
 available. You can either set `doom-theme' or manually load a theme with the
 `load-theme' function. This is the default:

According to research, dark-mode is not more readable than white background.
But 'doom-acario-light is not colorful enough for me for ediff.

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:

It seems that 'doom-vibrant provides indeed much vibrant contrast for ediff. Keep use it.
(setq doom-theme 'doom-vibrant) this one looks very pleasant.

#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-gruvbox-light)
#+END_SRC

** Configuration evil mode line for modal
Not to use colored icon to indicate the modal of evil,
better visible for the colorblind.
(setq doom-modeline-modal-icon nil)

Try to set it t, to see if it works for me.
#+BEGIN_SRC emacs-lisp
(setq doom-modeline-modal-icon t)
#+END_SRC
** Line Number

This determines the style of line numbers in effect. If set to `nil', line
numbers are disabled. To have absolute line number, set it to t,
For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type `relative)
#+END_SRC

* org-roam

Based on https://www.ianjones.us/own-your-second-brain
Added +roam in ./init.el in the clause of org

You can access all of the Roam commands with spc n r. It's nice to bind your own to skip that one character so lets add some custom key mappings.

Add a org-roam-ref-capture-templates in your config.el here is mine:
The ROAM_KEY is how org-roam knows what site links to what note.

Note, for the problem of not showing backlink in Ubuntu/WSL1,
the solution is that org-roam-directory should be set to the real directory, instead of the symbolic link,
(file-truename "~/Dropbox/org/org-roam") to translate the symbolic link to the real path, also after changing the setting, must execute M-x org-roam-db-build-cache then the backlinks will show up.


#+BEGIN_SRC emacs-lisp
(after! org-roam
        (setq org-roam-ref-capture-templates
            '(("r" "ref" plain (function org-roam-capture--get-point)
               "%?"
               :file-name "websites/${slug}"
               :head "#+TITLE: ${title}
    ,#+ROAM_KEY: ${ref}
    - source :: ${ref}"
               :unnarrowed t))
            org-roam-db-location
            ;; set location for org-roam.db away from org-roam to avoid conflct due to Dropbox file synch
            "~/.emacs.d/.cache/org-roam.db"
            org-roam-directory (file-truename "~/Dropbox/org")
            )
        (map! :leader
            :prefix "n"
            :desc "org-roam" "l" #'org-roam
            :desc "org-roam-insert" "i" #'org-roam-insert
            :desc "org-roam-switch-to-buffer" "b" #'org-roam-switch-to-buffer
            :desc "org-roam-find-file" "f" #'org-roam-find-file
            :desc "org-roam-show-graph" "g" #'org-roam-show-graph
            :desc "org-roam-capture" "c" #'org-roam-capture))
#+END_SRC

Mon Dec  7 19:19:30 2020, change org-roam-directory (file-truename "~/Dropbox/org/org-roam") to
org-roam-directory (file-truename "~/Dropbox/org")
in order to link with the other org files in ~/Dropbox/org

For setting up org-roam-server for showing graph in browser

#+BEGIN_SRC emacs-lisp
(use-package! org-roam-server
  :after org-roam
  :defer t
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-export-inline-images t
        org-roam-server-authenticate nil
        org-roam-server-label-truncate t
        org-roam-server-label-truncate-length 60
        org-roam-server-label-wrap-length 20)
  (defun org-roam-server-open ()
    "Ensure the server is active, then open the roam graph."
    (interactive)
    (org-roam-server-mode 1)
    (server-start)                          ; start emacs server required for org-roam-server to provide click and open org file
    (browse-url-xdg-open (format "http://localhost:%d" org-roam-server-port))))

(after! org-roam
  (org-roam-server-mode))

(use-package! org-roam-protocol
  :after org-roam
  :defer t)
#+END_SRC

The following are kept for historical reason for now.

(use-package! org-journal
      :bind
      ("C-c n j" . org-journal-new-entry)
      :custom
      (org-journal-dir "~/Dropbox/org/org-roam/")
      (org-journal-date-prefix "#+TITLE: ")
      (org-journal-file-format "%Y-%m-%d.org")
      (org-journal-date-format "%A, %d %B %Y"))
    (setq org-journal-enable-agenda-integration t)
*** org-roam for zettelkasten

#+BEGIN_SRC emacs-lisp
;; (use-package! org-roam
;;   :commands (org-roam-insert org-roam-find-file org-roam)
;;   :init
;;   (setq org-roam-directory "~/Dropbox/org/zettelkasten")
;;   (map! :leader
;;         :prefix "n"
;;         :desc "Org-Roam-Insert" "i" #'org-roam-insert
;;         :desc "Org-Roam-Find"   "/" #'org-roam-find-file
;;         :desc "Org-Roam-Buffer" "r" #'org-roam)
;;   :config
;;   (org-roam-mode +1)
#+END_SRC

#+RESULTS:

* Start emacs's server
Assume emacs server has already started in org-roam-server-open
#+BEGIN_SRC emacs-lisp
;; (server-start)
#+END_SRC

#+RESULTS:


* Review and confirmed
The above are the configurations that have been tested.

* Experiment

** Setup for projectile

I don't use projectile yet, Fri Oct  9 21:59:02 2020.
Add the root directories that containt projects, instead of the home diretory, which is too broad.
#+BEGIN_SRC emacs-lisp
(setq
 projectile-project-search-path '("~/projects" "~/programming"))
#+END_SRC
** Config to open url from emacs/WSL
Based on https://adam.kruszewski.name/2017/09/emacs-in-wsl-and-opening-links/
The following works, but it won't work for "&foo=1" etc because ampersants are reserved in CMD.
(defun config-launching-browser-from-wsl/emacs ()
  "Configue to be able to launch web browser from emacs with WSL."
  (when (string-match "Linux.*Microsoft.*Linux"
                      (shell-command-to-string "uname -a"))
    (setq
     browse-url-generic-program  "/mnt/c/Windows/System32/cmd.exe"
     browse-url-generic-args     '("/c" "start" "")
     browse-url-browser-function 'browse-url-generic)))
(config-launching-browser-from-wsl/emacs)

This one using powershell.exe instead may work better.

#+begin_src emacs-lisp
(defun wsl--browse-url (url &optional _new-window)
;; new-window ignored
"Opens link via powershell.exe"
(interactive (browse-url-interactive-arg "URL: "))
(let ((quotedUrl (format "start '%s'" url)))
(apply 'call-process "/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe" nil
0 nil
(list "-Command" quotedUrl))))

(when (string-match "Linux.*Microsoft.*Linux"
                      (shell-command-to-string "uname -a"))
    (setq-default browse-url-browser-function 'wsl--browse-url))
#+end_src

* Org Setup

** Directories
Cleaned up on Fri Oct  9 22:01:50 2020.
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org/"
      org-image-actual-width nil
      ;; +org-export-directory "~/.export/" ;; no longer used
      org-archive-location "~/Dropbox/org/archive.org::datetree/" ; still useful Fri Oct  9 21:51:13 2020
      org-default-notes-file "~/Dropbox/org/inbox.org"            ; might not be useful anymore, as I use daily journal to capture notes, Fri Oct  9 21:53:25 2020
      )
#+END_SRC
** Todo keywords setup

Need to add PROJ as umbrella.
The agenda setup accordingly need to have the corresponding display in the agenda commands.

** TODO Faces

Need to add condition to adjust faces based on theme select.

#+BEGIN_SRC emacs-lisp
(after! org (setq org-todo-keyword-faces
      '(("TODO" :foreground "tomato" :weight bold)
        ("WAITING" :foreground "light sea green" :weight bold)
        ("STARTED" :foreground "DodgerBlue" :weight bold)
        ("DELEGATED" :foreground "Gold" :weight bold)
        ("NEXT" :foreground "violet red" :weight bold)
        ("DONE" :foreground "slategrey" :weight bold))))
#+END_SRC
*** Keywords
#+BEGIN_SRC emacs-lisp
(after! org (setq org-todo-keywords
      '((sequence "TODO(t)" "WAITING(w!)" "STARTED(s!)" "NEXT(n!)" "DELEGATED(D!)" "|" "INVALID(I!)" "DONE(d!)" "HOLD(h)" "PNEDING(p)" "CANCELED(c)"))))
#+END_SRC

** Captures
#+BEGIN_SRC emacs-lisp
(after! org (setq org-capture-templates
      '(("g" "Getting things done")
        ("r" "References")
        ("d" "Diary")
        ("p" "Graph Data")
        ("t" "Data Tracker"))))
#+END_SRC
*** GTD Recurring Tasks
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("gx" "Recurring Task" entry (file "~/Dropbox/org/recurring.org")
               "* TODO %^{description}
:PROPERTIES:
:CREATED:    %U
:END:
:RESOURCES:
%^{url}
:END:

\** notes
%?")))
#+END_SRC
*** GTD Projects
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("gp" "Project" entry (file+headline"~/Dropbox/org/tasks.org" "Projects")
"* TODO %^{Description}
:PROPERTIES:
:SUBJECT: %^{subject}
:GOAL:    %^{goal}
:END:
:RESOURCES:
[[%^{url}]]
:END:

\*requirements*:
%^{requirements}

\*notes*:
%?

\** TODO %^{task1}")))
#+END_SRC
*** GTD Capture
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("gt" "Task" entry (file"~/Dropbox/org/inbox.org")
"** TODO %^{description}
:PROPERTIES:
:CREATED:    %U
:END:
:RESOURCES:
[[%^{url}]]
:END:

\*next steps*:
- [ ] %^{next steps}

\*notes*:
%?")))
#+END_SRC
*** Reference - Yank Example
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("re" "Yank new Example" entry(file+headline"~/Dropbox/org/notes/examples.org" "INBOX")
"* %^{example}
:PROPERTIES:
:SOURCE:  %^{source|Command|Script|Code|Usage}
:SUBJECT: %^{subject}
:END:

\#+BEGIN_SRC
%x
\#+END_SRC
%?")))
#+END_SRC
*** Reference - New Entry
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("rn" "Yank new Example" entry(file+headline"~/Dropbox/org/notes/references.org" "INBOX")
"* %^{example}
:PROPERTIES:
:CATEGORY: %^{category}
:SUBJECT:  %^{subject}
:END:
:RESOURCES:
:END:

%?")))
#+END_SRC
*** Diary - Daily Log
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("dn" "New Diary Entry" entry(file+olp+datetree"~/Dropbox/org/diary.org" "Dailies")
"* %^{example}
:PROPERTIES:
:CATEGORY: %^{category}
:SUBJECT:  %^{subject}
:MOOD:     %^{mood}
:END:
:RESOURCES:
:END:

\*What was one good thing you learned today?*:
- %^{whatilearnedtoday}

\*List one thing you could have done better*:
- %^{onethingdobetter}

\*Describe in your own words how your day was*:
- %?")))
#+END_SRC

** zetteldeft another implementation zettelkasten
I have not yet figured out which is more suitable for me, org-roam or
zetteldeft.
org-roam might be better for generating link graph.
zetteldeft might be better for add annotations in separate files to improve text
study, such as Bible study.

Use "~/Dropbox/org" as the directory for all the text to be searched by deft.
#+BEGIN_SRC emacs-lisp
(use-package! zetteldeft
  :after deft
:init
(setq deft-directory "~/Dropbox/org"
      ; "~"                ; ~/ didn't work. I want to try be able to search all my org files my computer
      deft-recursive t)
(general-define-key
  :prefix "SPC"
  :non-normal-prefix "C-SPC"
  :states '(normal visual motion emacs)
  :keymaps 'override
  "d"  '(nil :wk "deft")
  "dd" '(deft :wk "deft")
  "dD" '(zetteldeft-deft-new-search :wk "new search")
  "dR" '(deft-refresh :wk "refresh")
  "ds" '(zetteldeft-search-at-point :wk "search at point")
  "dc" '(zetteldeft-search-current-id :wk "search current id")
  "df" '(zetteldeft-follow-link :wk "follow link")
  "dF" '(zetteldeft-avy-file-search-ace-window :wk "avy file other window")
  "dl" '(zetteldeft-avy-link-search :wk "avy link search")
  "dt" '(zetteldeft-avy-tag-search :wk "avy tag search")
  "dT" '(zetteldeft-tag-buffer :wk "tag list")
  "di" '(zetteldeft-find-file-id-insert :wk "insert id")
  "dI" '(zetteldeft-find-file-full-title-insert :wk "insert full title")
  "do" '(zetteldeft-find-file :wk "find file")
  "dn" '(zetteldeft-new-file :wk "new file")
  "dN" '(zetteldeft-new-file-and-link :wk "new file & link")
  "dr" '(zetteldeft-file-rename :wk "rename")
  "dx" '(zetteldeft-count-words :wk "count words"))
  )
#+END_SRC

** Exports
#+BEGIN_SRC emacs-lisp
(setq org-html-head-include-scripts t
      org-export-with-toc t
      org-export-with-author t
      org-export-headline-levels 5
      org-export-with-drawers t
      org-export-with-email t
      org-export-with-footnotes t
      org-export-with-latex t
      org-export-with-section-numbers nil
      org-export-with-properties t
      org-export-with-smart-quotes t)

;(after! org (add-to-list 'org-export-backends 'pandoc))
(after! org (add-to-list 'org-export-backends 'pdf))
#+END_SRC
*** Latex setup

**** org-latex-classes setup
The body of the following is from tufte.el of my spacemacs org configurations.

#+BEGIN_SRC emacs-lisp
(after! ox-latex
  (add-to-list 'org-latex-classes
               '("tufte-handout"
                 "\\documentclass[twoside,nobib]{tufte-handout}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")))
  (add-to-list 'org-latex-classes
               '("tufte-book"
                 "\\documentclass[twoside,nobib]{tufte-book}
                                  [NO-DEFAULT-PACKAGES]"
                 ("\\part{%s}" . "\\part*{%s}")
                 ("\\chapter{%s}" . "\\chapter*{%s}")
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}"))))
#+END_SRC
Note, the key to make the above expression is that the package parameter
ox-latex should not be quoted!

**** Setup for Chinese text
The commented out is too slow. I want to try to reduce the times of compilations.
Just using two lines of the commands, it seems still work. But however, the major time consuming
is the regeneration of the uml diagrams. I wonder how I can avoid the regeneration of the uml diagrams.
#+BEGIN_SRC emacs-lisp
;; (after! ox-latex
;;   (setq org-latex-pdf-process
;;             '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
;;               "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
;;               "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
;;               "xelatex -interaction nonstopmode -output-directory %o %f"
;;               "xelatex -interaction nonstopmode -output-directory %o %f"
;;               "xelatex -interaction nonstopmode -output-directory %o %f"
;;               ;;"rm -fr %b.out %b.log %b.tex auto"
;;               )))
(after! ox-latex
  (setq org-latex-pdf-process
            '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
              "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
              "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
              "xelatex -interaction nonstopmode -output-directory %o %f"
              "xelatex -interaction nonstopmode -output-directory %o %f"
              "xelatex -interaction nonstopmode -output-directory %o %f"
              ;"rm -fr %b.out %b.log %b.tex auto"
              )))
#+END_SRC
Note, the value of org-latex-pdf-process should be a list of string, not a
string!

(after! ox-latex ;; latex


      ;; {{ export org-mode in Chinese into PDF
      ;; @see http://freizl.github.io/posts/tech/2012-04-06-export-orgmode-file-in-Chinese.html
      ;; and you need install texlive-xetex on different platforms
      ;; To install texlive-xetex:
      ;;    `sudo USE="cjk" emerge texlive-xetex` on Gentoo Linux
      ;; }}
      ;;(setq org-latex-default-class "ctexart")
    (add-to-list 'org-latex-packages-alist '("" "minted"))
    (setq org-latex-listings 'minted)
    (setq org-src-fontify-natively t)
    )

***** Not used org-latex-pdf-process commands
The following is not used as it dosen't tolerate the warning of font missing.
(setq org-latex-pdf-process
            '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
              "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
              "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
              "xelatex -interaction nonstopmode -output-directory %o %f"
              "xelatex -interaction nonstopmode -output-directory %o %f"
              "xelatex -interaction nonstopmode -output-directory %o %f"
              "rm -fr %b.out %b.log %b.tex auto"))
***** Not used code for LaTeX class definition
The following code is not needed for Chinese setup:
(add-to-list 'org-latex-classes '("article" "\\documentclass[a4paper,11pt]{article}

        [NO-DEFAULT-PACKAGES]
          \\usepackage[utf8]{inputenc}
          \\usepackage[T1]{fontenc}
          \\usepackage{fixltx2e}
          \\usepackage{graphicx}
          \\usepackage{longtable}
          \\usepackage{float}
          \\usepackage{wrapfig}
          \\usepackage{rotating}
          \\usepackage[normalem]{ulem}
          \\usepackage{amsmath}
          \\usepackage{textcomp}
          \\usepackage{marvosym}
          \\usepackage{wasysym}
          \\usepackage{amssymb}
          \\usepackage{booktabs}
          \\usepackage[colorlinks,linkcolor=black,anchorcolor=black,citecolor=black]{hyperref}
          \\tolerance=1000
          \\usepackage{listings}
          \\usepackage{xcolor}
          \\usepackage{fontspec}
          \\usepackage{xeCJK}
          \\setCJKmainfont{Weibei SC}
          \\setmainfont{Fantasque Sans Mono}
          \\lstset{
          %行号
          numbers=left,
          %背景框
          framexleftmargin=10mm,
          frame=none,
          %背景色
          %backgroundcolor=\\color[rgb]{1,1,0.76},
          backgroundcolor=\\color[RGB]{245,245,244},
          %样式
          keywordstyle=\\bf\\color{blue},
          identifierstyle=\\bf,
          numberstyle=\\color[RGB]{0,192,192},
          commentstyle=\\it\\color[RGB]{0,96,96},
          stringstyle=\\rmfamily\\slshape\\color[RGB]{128,0,0},
          %显示空格
          showstringspaces=false
          }
          "
                                        ("\\section{%s}" . "\\section*{%s}")
                                        ("\\subsection{%s}" . "\\subsection*{%s}")
                                        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                                        ("\\paragraph{%s}" . "\\paragraph*{%s}")
                                        ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))


** Setup for emacs-jupyter
#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-babel-default-header-args:jupyter-python '((:async . "yes")
                                                       (:session . "py")
                                                       (:kernel . "python3"))))
(use-package! ox-ipynb
  :after ox)
#+END_SRC

The following is adapted from
https://martinralbrecht.wordpress.com/2020/08/23/conda-jupyter-and-emacs/
#+BEGIN_SRC emacs-lisp
 (use-package conda
  :config (progn
            (conda-env-initialize-interactive-shells)
            (conda-env-initialize-eshell)
            (conda-env-autoactivate-mode t)
            (setq conda-env-home-directory (expand-file-name "~/.conda/"))
            (custom-set-variables '(conda-anaconda-home "/home/yubrshen/anaconda3/"))))
#+END_SRC

** emacs-reveal (org-reveal)

Convert org-files to HTML slides reveal.js based
#+BEGIN_SRC emacs-lisp
(use-package! org-re-reveal
  ;:custom
  ;(setq org-re-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"
  ;;       org-reveal-title-slide nil
  ;      )
)

(after! org-re-reveal
  (setq org-re-reveal-width 1900        ; I like slide as wide as possible
        org-re-reveal-height 1200
        org-re-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"
        org-reveal-title-slide nil
        )
  )
#+END_SRC




** Minimum setup for plantuml
I found out that the value of plantuml-default-exec-mode and plantuml-jar-path
must be set as follows in order to export document with plantuml code Wed Feb  5 11:49:42 2020.

#+BEGIN_SRC emacs-lisp
(after! plantuml-mode
  (setq plantuml-default-exec-mode 'jar
        plantuml-jar-path (expand-file-name "~/bin/plantuml.jar")))
#+END_SRC

With the changes to Doom at Tue Feb 25 2020, I discovered that I need
also to have the setup of ob-plantuml to have plantuml code to generate
diagrams.

#+BEGIN_SRC emacs-lisp
(use-package! ob-plantuml
  ;:ensure nil
  :commands
  (org-babel-execute:plantuml)
  )
#+END_SRC

This is a great lesson that
- Doom's changes very fast, may not be stable. It took me 3 hours to figure out
  the solution.
- I might need to stick to a more stable version.

** Logging & Drawers
#+BEGIN_SRC emacs-lisp
(setq org-log-state-notes-insert-after-drawers nil
      org-log-into-drawer t
      org-log-done 'time
      org-log-repeat 'time
      org-log-redeadline 'note
      org-log-reschedule 'note)
#+END_SRC
** Refiling
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((org-agenda-files . (:maxlevel . 6)))
      org-hide-emphasis-markers nil
      org-outline-path-complete-in-steps nil
      org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC
** Agenda
#+BEGIN_SRC emacs-lisp
(setq
      org-agenda-diary-file "~/Dropbox/org/diary.org"
      diary-file            "~/Dropbox/org/diary.org"
      org-agenda-use-time-grid nil
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-habit-show-habits t
       my/inbox "~/Dropbox/org/inbox.org"
       my/project "~/Dropbox/org/tasks.org"
       my/someday "~/Dropbox/org/someday.org"
       my/birthdays "~/Dropbox/org/birthdays.org"
       ;org-agenda-files (list my/project my/inbox)
      )
#+END_SRC
** Super Agenda
#+name:super-zen-mode
#+begin_src emacs-lisp
(setq spacemacs-theme-org-agenda-height nil
      org-agenda-time-grid '((daily today require-timed) "----------------------" nil)
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-include-diary nil ; t
      org-agenda-block-separator t ;nil
      org-agenda-compact-blocks t ; must be t to have the TODO'S and NEXT's
      org-agenda-start-with-log-mode nil; with org-agenda-start-with-log-mode being t, all the DONE tasks will be shownt
      org-agenda-prefix-format '((todo . "%-10b") (tags . "%-10b") (agenda . "%-10b")))


#+end_src

;; (setq org-agenda-custom-commands
      ';; (("z" "Super zaen view"
   ;;       ((agenda "" ((org-agenda-span 3) ; 'day would not work, it only show the Saturday of last week
   ;;                            (org-agenda-start-day "-1d")
   ;;                    (org-super-agenda-groups
   ;;                     '((:name "Today"
   ;;                              :time-grid t
   ;;                              :date today
   ;;                              :todo "TODAY"
   ;;                              :scheduled today
   ;;                              :order 1)))))
   ;;        (alltodo "" ((org-agenda-overriding-header "")
   ;;                     (org-super-agenda-groups
   ;;                      '((:name "Next to do"
   ;;                               :todo "NEXT"
   ;;                               :order 1)
   ;;                        (:name "Important"
   ;;                               :tag "Important"
   ;;                               :priority "A"
   ;;                               :order 6)
   ;;                        (:name "Due Today"
   ;;                               :deadline today
   ;;                               :order 2)
   ;;                        (:name "Due Soon"
   ;;                               :deadline future
   ;;                               :order 8)
   ;;                        (:name "Overdue"
   ;;                               :deadline past
   ;;                               :order 7)
   ;;                        (:name "Assignments"
   ;;                               :tag "Assignment"
   ;;                               :order 10)
   ;;                        (:name "Issues"
   ;;                               :tag "Issue"
   ;;                               :order 12)
   ;;                        (:name "Projects"
   ;;                               :tag "Project"
   ;;                               :order 14)
   ;;                        (:name "Emacs"
   ;;                               :tag "Emacs"
   ;;                               :order 13)
   ;;                        (:name "Research"
   ;;                               :tag "Research"
   ;;                               :order 15)
   ;;                        (:name "To read"
   ;;                               :tag "Read"
   ;;                               :order 30)
   ;;                        (:name "Waiting"
   ;;                               :todo "WAITING"
   ;;                               :order 20)
   ;;                        (:name "trivial"
   ;;                               :priority<= "C"
   ;;                               :tag ("Trivial" "Unimportant")
   ;;                               :todo ("SOMEDAY" )
   ;;                               :order 90)
   ;;                        (:discard (:tag ("Chore" "Routine" "Daily")))))))))
   ;; ("g" "My General Agenda"
   ;;  (
   ;;   (agenda ""
   ;;           (;; (org-agenda-files (list my/inbox my/project my/birthdays))
   ;;            (org-agenda-span 3) ; 'day would not work, it only show the Saturday of last week
   ;;            (org-agenda-start-day "-1d"))) ; day dose not work
   ;;   (tags "@heavy-@home+TODO=\"NEXT\""
   ;;         ((org-agenda-overriding-header "NEXT @heavy")
   ;;          (org-agenda-sorting-strategy '(priority-down))
   ;;          (org-agenda-skip-function
   ;;           '(or
   ;;             (my/org-skip-inode-and-root)
   ;;             (org-agenda-skip-entry-if 'scheduled)))))
   ;;   (tags "-@heavy-@home+TODO=\"NEXT\""
   ;;         ((org-agenda-overriding-header "NEXT non-heavy")
   ;;          (org-agenda-sorting-strategy '(priority-down))
   ;;          (org-agenda-skip-function
   ;;           '(or
   ;;             (my/org-skip-inode-and-root)
   ;;             (org-agenda-skip-entry-if 'scheduled)))))
   ;;   (tags "@heavy-@home+TODO=\"TODO\""
   ;;         ((org-agenda-overriding-header "@heavy")
   ;;          (org-agenda-sorting-strategy '(priority-down))
   ;;          (org-agenda-skip-function
   ;;           '(or
   ;;             (my/org-skip-inode-and-root)
   ;;             (org-agenda-skip-entry-if 'scheduled)))))
   ;;   (tags "-@heavy-@home+TODO=\"TODO\""
   ;;         ((org-agenda-overriding-header "non-heavy")
   ;;          (org-agenda-sorting-strategy '(priority-down))
   ;;          (org-agenda-skip-function
   ;;           '(or
   ;;             (my/org-skip-inode-and-root)
   ;;             (org-agenda-skip-entry-if 'scheduled)))))
   ;;   (tags "@home+@heavy+TODO=\"NEXT\""
   ;;         ((org-agenda-overriding-header "NEXT @heavy@home")
   ;;          (org-agenda-sorting-strategy '(priority-down))
   ;;          (org-agenda-skip-function
   ;;           '(or
   ;;             (my/org-skip-inode-and-root)
   ;;             (org-agenda-skip-entry-if 'scheduled)))))
   ;;   (tags "@home-@heavy+TODO=\"NEXT\""
   ;;         ((org-agenda-overriding-header "NEXT @home")
   ;;          (org-agenda-sorting-strategy '(priority-down))
   ;;          (org-agenda-skip-function
   ;;           '(or
   ;;             (my/org-skip-inode-and-root)
   ;;             (org-agenda-skip-entry-if 'scheduled)))))
   ;;   (tags "@home+@heavy+TODO=\"TODO\""
   ;;         ((org-agenda-overriding-header "@heavy@home")
   ;;          (org-agenda-sorting-strategy '(priority-down))
   ;;          (org-agenda-skip-function
   ;;           '(or
   ;;             (my/org-skip-inode-and-root)
   ;;             (org-agenda-skip-entry-if 'scheduled)))))
   ;;   (tags "@home-@heavy+TODO=\"TODO\""
   ;;         ((org-agenda-overriding-header "@home")
   ;;          (org-agenda-sorting-strategy '(priority-down))
   ;;          (org-agenda-skip-function
   ;;           '(or
   ;;             (my/org-skip-inode-and-root)
   ;;             (org-agenda-skip-entry-if 'scheduled)))))

   ;;   (tags "TODO={.*}"
   ;;         ((org-agenda-files (list my/inbox))
   ;;          (org-agenda-overriding-header "Inbox")
   ;;          (org-tags-match-list-sublevels nil)
   ;;          (org-agenda-sorting-strategy '(priority-down))))
   ;;   (todo "WAITING"
   ;;         ((org-agenda-overriding-header "Waiting")
   ;;          (org-agenda-sorting-strategy '(priority-down))))
   ;;   (tags "-{^@.*}+TODO={NEXT\\|TODO}"
   ;;         (
   ;;          (org-agenda-overriding-header "Tasks Without Context")
   ;;          (org-agenda-skip-function #'my/org-skip-inode-and-root)
   ;;          (org-agenda-sorting-strategy
   ;;           '(todo-state-down priority-down))))
   ;;   (tags "TODO=\"TODO\"+@office"
   ;;         ((org-agenda-overriding-header "Active Work Projects")
   ;;          (org-agenda-sorting-strategy '(priority-down))
   ;;          (org-tags-match-list-sublevels nil)
   ;;          (org-agenda-skip-function
   ;;           '(or
   ;;             (my/org-skip-leaves)
   ;;             (org-agenda-skip-subtree-if 'nottodo '("NEXT"))))))
   ;;   (tags "TODO=\"TODO\"+@office"
   ;;         ((org-agenda-overriding-header "Stuck Work Projects")
   ;;          (org-agenda-sorting-strategy '(priority-down))
   ;;          (org-tags-match-list-sublevels nil)
   ;;          (org-agenda-skip-function
   ;;           '(or
   ;;             (my/org-skip-leaves)
   ;;             (org-agenda-skip-subtree-if 'todo '("NEXT"))))))
   ;;   (tags "TODO=\"TODO\"-@office"
   ;;         ((org-agenda-overriding-header "Active Projects")
   ;;          (org-agenda-sorting-strategy '(priority-down))
   ;;          (org-tags-match-list-sublevels nil)
   ;;          (org-agenda-skip-function
   ;;           '(or
   ;;             (my/org-skip-leaves)
   ;;             (org-agenda-skip-subtree-if 'nottodo '("NEXT"))))))
   ;;   (tags "TODO=\"TODO\"-@office"
   ;;         ((org-agenda-overriding-header "Stuck Projects")
   ;;          (org-agenda-sorting-strategy '(priority-down))
   ;;          (org-tags-match-list-sublevels nil)
   ;;          (org-agenda-skip-function
   ;;           '(or
   ;;             (my/org-skip-leaves)
   ;;             (org-agenda-skip-subtree-if 'todo '("NEXT"))))))
   ;;   (tags "@read_watch_listen+TODO=\"NEXT\""
   ;;         ((org-agenda-overriding-header "NEXT @read/watch/listen")
   ;;          (org-agenda-sorting-strategy '(priority-down effort-up))
   ;;          (org-agenda-skip-function
   ;;           '(or
   ;;             (my/org-skip-inode-and-root)
   ;;             (org-agenda-skip-entry-if 'scheduled)))))
   ;;   (tags "@read_watch_listen+TODO=\"TODO\""
   ;;         ((org-agenda-overriding-header "@read/watch/listen")
   ;;          (org-agenda-sorting-strategy '(priority-down effort-up))
   ;;          (org-agenda-skip-function
   ;;           '(or
   ;;             (my/org-skip-inode-and-root)
   ;;             (org-agenda-skip-entry-if 'scheduled)))))
   ;;   ))
   ;;      ))
** My past agenda views settings

This does not use super agenda.

#+begin_src emacs-lisp
(defun my/org-skip-inode-and-root ()
  "
Retrun the position of the next child heading, if
a. there is any child
b. the first child's heading containts keyword
otherwise, return nil
"
  (when                                 ; when first child found and go to that
    (save-excursion
      (org-goto-first-child))
    (let ((eos (save-excursion          ; eos: end of the subtree or the end of the buffer
                 (or (org-end-of-subtree t)
                   (point-max))))
           (nh (save-excursion          ; nh: the position of the next heading or the end the buffer
                 (or (outline-next-heading)
                   (point-max))))
           (ks org-todo-keywords-1)     ; ks: all TODO and DONE keywords in the buffer
           mat)                         ; mat intialized to nil
      (save-excursion
        (org-goto-first-child)
        (while (and ks (not mat))       ; while there is still keywords, and mat is nil; that is to search one of the keywords
          (setq mat
            (re-search-forward (concat "\\*\\W+"
                                 (car ks)
                                 "\\W*")
              eos t))
          (setq ks (cdr ks))))
      (when mat                          ; when a keyword is found, return the position of the next heading
        nh))))

;;; my/org-skip-leaves
(defun my/org-skip-leaves ()
  "Returns the end of the subtree, if
a. there is no child, or
b. the first child has no keyword;
otherwise, return nil"
  (let ((eos (save-excursion            ; eos: end of the subtree or the end of the buffer
               (or (org-end-of-subtree t)
                 (point-max)))))
    (if (not (save-excursion
               (org-goto-first-child)))
      eos                               ; if there is no child (leave), returns the end of the current subtree
      (let ((ks org-todo-keywords-1)
             mat)                       ; mat initialized to nil
        (save-excursion
          (org-goto-first-child)
          (while (and ks (not mat))     ; while there is still keywords to search and there is none found
            (setq mat
              (re-search-forward (concat "\\*\\W+"
                                   (car ks)
                                   "\\W*")
                eos t))
            (setq ks (cdr ks))))
        (when (not mat)                 ; if no keyword found at the first child, returns the end of the subtree
          eos)))))                      ; otherwise returns nil

;;; my/org-skip-non-root-task-subtree
(defun my/org-skip-non-root-task-subtree ()
  "Returns the end of the current subtree if it's contained in a TODO task"
  (let ((eos (save-excursion
               (or (org-end-of-subtree t)
                 (point-max))))
         nonroot)                       ; nonroot initialized to nil
    (save-excursion
      (org-save-outline-visibility nil
        (org-reveal)
        (while (and (not nonroot) (org-up-heading-safe)) ; go to the parennt until a todo taks is found
          (setq nonroot (org-entry-get (point) "TODO")))))
    (when nonroot                       ; return the end of the current subtree if it's contained in a TODO task
      eos)))

;;; my/disallow-todo-state-for-projects
(defun my/disallow-todo-state-for-projects ()
  "Reset the heading to be TODO, if it is not one of TODO, DONE or CANCELLED"
  (when (my/org-skip-inode-and-root)
    (let ((ts (org-get-todo-state)))    ; ts: the TODO keyword of the current subtree
      (when (not (or (equal ts "TODO")
                   (equal ts "DONE")
                   (equal ts "CANCELLED")))
        (org-set-property "TODO" "TODO")))))

 (add-hook 'org-after-todo-state-change-hook 'my/disallow-todo-state-for-projects)

;;; my/repeated-task-template
(defun my/repeated-task-template ()
  "Capture template for repeated tasks."
  (concat "* NEXT %?\n"
          "  SCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d>>\")\n"
          "  :PROPERTIES:\n"
          "  :REPEAT_TO_STATE: NEXT\n"
          "  :RESET_CHECK_BOXES: t\n  :END:\n  %U\n  %a"))

#+end_src

** Examples of using org-ql with org-super-agenda

;; TODAY
(org-ql-block
 ;; Query
 '(and (todo)
       (scheduled :on today))
 ;; Block config
 ((org-ql-block-header "Today")))

 Next, need to specify what I want to have for agenda view, or translate my
 current one into a specification.
Check out the examples in org-ql: https://github.com/alphapapa/org-ql/blob/master/examples.org#agenda-like-view

* User Guide

;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.

* Chinese input inside emacs

#+BEGIN_SRC emacs-lisp
(use-package! pyim
  :config
  (use-package! pyim-basedict
    :config
    (pyim-basedict-enable)
    )
  (setq default-input-method "pyim"
        pyim-default-scheme 'microsoft-shuangpin)

  ;; (setq-default pyim-english-input-switch-functions
  ;;               '(pyim-probe-dynamic-english
  ;;                 pyim-probe-isearch-mode
  ;;                 pyim-probe-program-mode
  ;;                 pyim-probe-org-structure-template))
  ;; (setq-default pyim-punctuation-half-width-functions
  ;;                '(pyim-probe-punctuation-line-beginning
  ;;                  pyim-probe-punctuation-after-punctuation))
  ;; 开启拼音搜索功能
  ;; (pyim-isearch-mode 1)

  ;; 使用 popup-el 来绘制选词框, 如果用 emacs26, 建议设置
  ;; 为 'posframe, 速度很快并且菜单不会变形，不过需要用户
  ;; 手动安装 posframe 包。
  (setq pyim-page-tooltip 'popup)

  ;; 选词框显示5个候选词
  (setq pyim-page-length 9)

  ;; The following keybingings are used in org-mode:
  ;; :bind
  ;; (("M-j" . pyim-convert-string-at-point) ;与 pyim-probe-dynamic-english 配合
  ;;  ("C-;" . pyim-delete-word-from-personal-buffer))
  )
#+END_SRC

** Configuration of evil-mode to support input Chinese
#+BEGIN_SRC emacs-lisp
;; {{ make IME compatible with evil-mode
(defun evil-toggle-input-method ()
  "when toggle on input method, goto evil-insert-state. "
  (interactive)

  ;; load IME when needed, less memory footprint
  ;; (unless (featurep 'chinese-pyim)
  ;;   (require 'chinese-pyim))

  (cond
   ((and (boundp 'evil-mode) evil-mode)
    ;; evil-mode
    (cond
     ((eq evil-state 'insert)
      (toggle-input-method))
     (t
      (evil-insert-state)
      (unless current-input-method
        (toggle-input-method))
      ))
    (if current-input-method (message "IME on!")))
   (t
    ;; NOT evil-mode, some guy don't use evil-mode at all
    (toggle-input-method))))

(defadvice evil-insert-state (around evil-insert-state-hack activate)
  ad-do-it
  (if current-input-method (message "IME on!")))

(global-set-key (kbd "C-\\") 'evil-toggle-input-method)
;; }}
#+END_SRC

* dart-mode for Dart language

It seems that the following is no longer needed:
(use-package! dart-mode
  :mode "\\.dart\\'")

* Load personal snippets

I might have found a bug with the latest on the branch of development. For private snippets for org-mode, at ~/.doom.d/snippets/org-mode , only the last one loaded would work. I tried with two snippet definitions, it only have the last one loaded expanded, while the other one not. If you need more details, please let me know. The same problem is with earlier code, say two days ago from Feb. 5, 2020. (I loaded a snippet by visiting its definition file, and pressed C-c C-c).
YuToday at 4:00 PM
I suspect that my only configuration related to snippets might not be working:
(after! yas-minor-mode
  yas-reload-all)
I'm going to remove it to see if the problem disappear. I confirmed that removing my above configuration has no improvement. The problem is still there.

Actually, the problem is caused by having empty uuid for the snippets, which are
considered as one snippet, instead of two. That's why only the last one loaded
would work.

The solution is to have meaningful uuid, or simply removing the line of uuid in
the snippet.

However, I could not find a way to change the snippet file template, to have no
uuid by default. Herik's following solution didn't work for me:

"There is no uuid in the file template: https://github.com/hlissner/doom-emacs/blob/develop/modules/editor/file-templates/templates/snippet-mode/__

add it to ~/.doom.d/snippets/snippet-mode/__ and it'll overwrite the built-in template"

Maybe, I didn't set up the file-templates right? Fri Feb  7 10:49:58 2020
* Reference
https://rgoswami.me/dotdoom/config.html#orgc197690

* Note, limitation of Doom config: literate, generated config.el should be less than 481 lines
otherwise, the top part of the generation would be cut off!

My current solution is to remove the commented out dead code.
