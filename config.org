#+EXPORT_FILE_NAME: README

My DOOM emacs private configuration:
https://i.imgur.com/EBp5TxA.png

Note, in order to have the configurations in this literate file to take effect, for the first time using the file,
please perform in a shell
~/.emacs.d/bin/doom refresh

High focus on GTD process workflow:
#+RESULTS:
[[file:./attachments/gtd.png]]

* How Literate Configuration Works

With basic settings in ./init.el, ./packags.el,
the content of ./config.el will be generated from the Emacs Lisp code blocks
in this literate file.

The generation may be triggered by executing
~/.emacs.d/bin/doom refresh
or
saving this file in the emacs running with the configuration.

* General Settings
** Fonts

For fonts please download [[https://input.fontbureau.com/download/][Input]] and [[http://sourceforge.net/projects/dejavu/files/dejavu/2.37/dejavu-fonts-ttf-2.37.tar.bz2][DejaVu]]

#+BEGIN_SRC emacs-lisp
(setq doom-font (font-spec :family "InputMono" :size 18)
      doom-variable-pitch-font (font-spec :family "InputMono")
      doom-unicode-font (font-spec :family "DejaVu Sans")
      doom-big-font (font-spec :family "InputMono" :size 20))
#+END_SRC
** Lines
For this we just make small tweaks to line numbers.
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type t)
#+END_SRC
** Keys
#+BEGIN_SRC emacs-lisp

(map!
 :nvime "<f5> d" #'helm-org-rifle-directories
 :nvime "<f5> b" #'helm-org-rifle-current-buffer
 :nvime "<f5> o" #'helm-org-rifle-org-directory
 :nvime "<f5> a" #'helm-org-rifle-agenda-files)

(map! :leader
      :n "e" #'ace-window
      :n "!" #'swiper
      :n "@" #'swiper-all
      :n "#" #'deadgrep
      :n "$" #'helm-org-rifle-directories
      :n "X" #'org-capture
      (:prefix "o"
        :n "e" #'elfeed
        :n "g" #'metrics-tracker-graph
        :n "o" #'org-open-at-point
        :n "u" #'elfeed-update
        :n "w" #'deft)
      (:prefix "f"
        :n "o" #'plain-org-wiki-helm)
      (:prefix "n"
        :n "D" #'dictionary-lookup-definition
        :n "T" #'powerthesaurus-lookup-word)
      (:prefix "s"
        :n "d" #'deadgrep
        :n "q" #'org-ql-search
        :n "b" #'helm-org-rifle-current-buffer
        :n "o" #'helm-org-rifle-org-directory
        :n "." #'helm-org-rifle-directories)
      (:prefix "b"
        :n "c" #'org-board-new
        :n "e" #'org-board-open)
      (:prefix "t"
        :n "s" #'org-narrow-to-subtree
        :n "w" #'widen)
      (:prefix "/"
        :n "j" #'org-journal-search))
#+END_SRC
** General settings
#+BEGIN_SRC emacs-lisp
(setq-default fill-column 140)
(global-auto-revert-mode t)
#+END_SRC
Moving diary-file to Org Mode Settings/Agenda for better organization.
Auto revert mode will automatically reflect changes to the file external to the current Emacs session.

** Popup Rules
#+BEGIN_SRC emacs-lisp
(after! org (set-popup-rule! "^Capture.*\\.org$" :side 'right :size .40 :select t :vslot 2 :ttl 3))
(after! org (set-popup-rule! "Dictionary" :side 'bottom :height .40 :width 20 :select t :vslot 3 :ttl 3))
(after! org (set-popup-rule! "*helm*" :side 'bottom :height .40 :select t :vslot 5 :ttl 3))
(after! org (set-popup-rule! "*deadgrep" :side 'bottom :height .40 :select t :vslot 4 :ttl 3))
(after! org (set-popup-rule! "*xwidget" :side 'right :size .40 :select t :vslot 5 :ttl 3))
(after! org (set-popup-rule! "*org agenda*" :side 'right :size .40 :select t :vslot 2 :ttl 3))
#+END_SRC
* Doom Settings
** Theme
#+BEGIN_SRC emacs-lisp
(setq doom-theme 'doom-city-lights)
#+END_SRC
* Org Mode Settings

** Agenda
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/Dropbox/org/" "~/Dropbox/org/notes/")
      org-agenda-diary-file "~/Dropbox/org/diary.org"
      diary-file            "~/Dropbox/org/diary.org"
      org-agenda-use-time-grid nil
      org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-habit-show-habits t)
#+END_SRC
** Captures
#+BEGIN_SRC emacs-lisp
(after! org (setq org-capture-templates
      '(("g" "Getting things done")
        ("r" "References")
        ("d" "Diary")
        ("p" "Graph Data")
        ("t" "Data Tracker"))))
#+END_SRC
*** GTD Recurring Tasks
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("gx" "Recurring Task" entry (file "~/Dropbox/org/recurring.org")
               "* TODO %^{description}
:PROPERTIES:
:CREATED:    %U
:END:
:RESOURCES:
%^{url}
:END:

\** notes
%?")))
#+END_SRC
*** GTD Projects
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("gp" "Project" entry (file+headline"~/Dropbox/org/tasks.org" "Projects")
"* TODO %^{Description}
:PROPERTIES:
:SUBJECT: %^{subject}
:GOAL:    %^{goal}
:END:
:RESOURCES:
[[%^{url}]]
:END:

\*requirements*:
%^{requirements}

\*notes*:
%?

\** TODO %^{task1}")))
#+END_SRC
*** GTD Capture
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("gt" "Task" entry (file"~/Dropbox/org/inbox.org")
"** TODO %^{description}
:PROPERTIES:
:CREATED:    %U
:END:
:RESOURCES:
[[%^{url}]]
:END:

\*next steps*:
- [ ] %^{next steps}

\*notes*:
%?")))
#+END_SRC
*** Reference - Yank Example
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("re" "Yank new Example" entry(file+headline"~/Dropbox/org/notes/examples.org" "INBOX")
"* %^{example}
:PROPERTIES:
:SOURCE:  %^{source|Command|Script|Code|Usage}
:SUBJECT: %^{subject}
:END:

\#+BEGIN_SRC
%x
\#+END_SRC
%?")))
#+END_SRC
*** Reference - New Entry
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("rn" "Yank new Example" entry(file+headline"~/Dropbox/org/notes/references.org" "INBOX")
"* %^{example}
:PROPERTIES:
:CATEGORY: %^{category}
:SUBJECT:  %^{subject}
:END:
:RESOURCES:
:END:

%?")))
#+END_SRC
*** Diary - Daily Log
#+BEGIN_SRC emacs-lisp
(after! org (add-to-list 'org-capture-templates
             '("dn" "New Diary Entry" entry(file+olp+datetree"~/Dropbox/org/diary.org" "Dailies")
"* %^{example}
:PROPERTIES:
:CATEGORY: %^{category}
:SUBJECT:  %^{subject}
:MOOD:     %^{mood}
:END:
:RESOURCES:
:END:

\*What was one good thing you learned today?*:
- %^{whatilearnedtoday}

\*List one thing you could have done better*:
- %^{onethingdobetter}

\*Describe in your own words how your day was*:
- %?")))
#+END_SRC
** Directories
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Dropbox/org/"
      org-image-actual-width nil
      +org-export-directory "~/.export/"
      org-archive-location "~/Dropbox/org/archive.org::datetree/"
      org-default-notes-file "~/Dropbox/org/inbox.org"
      projectile-project-search-path '("~/"))
#+END_SRC
** Exports
#+BEGIN_SRC emacs-lisp
(setq org-html-head-include-scripts t
      org-export-with-toc t
      org-export-with-author t
      org-export-headline-levels 5
      org-export-with-drawers t
      org-export-with-email t
      org-export-with-footnotes t
      org-export-with-latex t
      org-export-with-section-numbers nil
      org-export-with-properties t
      org-export-with-smart-quotes t)

;(after! org (add-to-list 'org-export-backends 'pandoc))
(after! org (add-to-list 'org-export-backends 'pdf))
#+END_SRC
** TODO Faces

Need to add condition to adjust faces based on theme select.

#+BEGIN_SRC emacs-lisp
(after! org (setq org-todo-keyword-faces
      '(("TODO" :foreground "tomato" :weight bold)
        ("WAITING" :foreground "light sea green" :weight bold)
        ("STARTED" :foreground "DodgerBlue" :weight bold)
        ("DELEGATED" :foreground "Gold" :weight bold)
        ("NEXT" :foreground "violet red" :weight bold)
        ("DONE" :foreground "slategrey" :weight bold))))
#+END_SRC
** Keywords
#+BEGIN_SRC emacs-lisp
(after! org (setq org-todo-keywords
      '((sequence "TODO(t)" "WAITING(w!)" "STARTED(s!)" "NEXT(n!)" "DELEGATED(d!)" "|" "INVALID(I!)" "DONE(d!)"))))
#+END_SRC
** TODO Latex Exports

Getting errors on start up for this one. Will need to look into it.

#+BEGIN_EXAMPLE
(add-to-list 'org-latex-classes
             '("koma-article"
               "\\documentclass{scrartcl}
\\usepackage[T1]{fontenc}
\\usepackage[bitstream-charter]{mathdesign}
\\usepackage[scaled=.9]{helvet}
\\usepackage{courier} % tt
\\usepackage{geometry}
\\usepackage{booktabs}
\\usepackage{multicol}
\\usepackage{paralist}
\\geometry{letter, textwidth=6.5in, textheight=10in,
            marginparsep=7pt, marginparwidth=.6in}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_EXAMPLE
** Link Abbreviations
#+BEGIN_SRC emacs-lisp
(setq org-link-abbrev-alist
      '(("doom-repo" . "https://github.com/hlissner/doom-emacs/%s")
        ("wolfram" . "https://wolframalpha.com/input/?i=%s")
        ("duckduckgo" . "https://duckduckgo.com/?q=%s")
        ("gmap" . "https://maps.google.com/maps?q=%s")
        ("gimages" . "https://google.com/images?q=%s")
        ("google" . "https://google.com/search?q=")
        ("youtube" . "https://youtube.com/watch?v=%s")
        ("youtu" . "https://youtube.com/results?search_query=%s")
        ("github" . "https://github.com/%s")
        ("attachments" . "~/Dropbox/org/.attachments/")))
#+END_SRC
** Logging & Drawers
#+BEGIN_SRC emacs-lisp
(setq org-log-state-notes-insert-after-drawers nil
      org-log-into-drawer t
      org-log-done 'time
      org-log-repeat 'time
      org-log-redeadline 'note
      org-log-reschedule 'note)
#+END_SRC
** Prettify
#+BEGIN_SRC emacs-lisp
(setq org-bullets-bullet-list '("✖" "✚")
      org-ellipsis "▼")
#+END_SRC
** Publishing
#+BEGIN_SRC emacs-lisp
(setq org-publish-project-alist
      '(("references-attachments"
         :base-directory "~/Dropbox/org/notes/images/"
         :base-extension "jpg\\|jpeg\\|png\\|pdf\\|css"
         :publishing-directory "~/publish_html/references/images"
         :publishing-function org-publish-attachment)
        ("references-md"
         :base-directory "~/Dropbox/org/notes/"
         :publishing-directory "~/publish_md"
         :base-extension "org"
         :recursive t
         :headline-levels 5
         :publishing-function org-html-publish-to-html
         :section-numbers nil
         :html-head "<link rel=\"stylesheet\" href=\"http://thomasf.github.io/solarized-css/solarized-light.min.css\" type=\"text/css\"/>"
         :infojs-opt "view:t toc:t ltoc:t mouse:underline buttons:0 path:http://thomas.github.io/solarized-css/org-info.min.js"
         :with-email t
         :with-toc t)
        ("tasks"
         :base-directory "~/Dropbox/org/"
         :publishing-directory "~/publish_tasks"
         :base-extension "org"
         :recursive t
         :auto-sitemap t
         :sitemap-filename "index"
         :html-link-home "../index.html"
         :publishing-function org-html-publish-to-html
         :section-numbers nil
;         :html-head "<link rel=\"stylesheet\"
;href=\"https://codepen.io/nmartin84/pen/MWWdwbm.css\"
;type=\"text/css\"/>"
         :with-email t
         :html-link-up ".."
         :auto-preamble t
         :with-toc t)
        ("pdf"
         :base-directory "~/Dropbox/org/references/"
         :base-extension "org"
         :publishing-directory "~/publish"
         :preparation-function somepreparationfunction
         :completion-function  somecompletionfunction
         :publishing-function org-latex-publish-to-pdf
         :recursive t
         :latex-class "koma-article"
         :headline-levels 5
         :with-toc t)
         ("myprojectweb" :components("references-attachments" "pdf" "references-md" "tasks"))))
#+END_SRC
** Refiling
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((org-agenda-files . (:maxlevel . 6)))
      org-hide-emphasis-markers nil
      org-outline-path-complete-in-steps nil
      org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC
** Tags
#+BEGIN_SRC emacs-lisp
(setq org-tags-column -80
      org-tag-persistent-alist '(("@email" . ?e) ("@write" . ?W) ("@phone" . ?p) ("@configure" . ?C) ("@work" . ?w) ("@personal" . ?l) ("@read" . ?r) ("@watch" . ?W) ("@computer" . ?c) ("@bills" . ?b) ("@purchase" . ?P)))
#+END_SRC

* Extra Modules
** Plantuml
#+BEGIN_SRC emacs-lisp
(use-package ob-plantuml
  :ensure nil
  :commands
  (org-babel-execute:plantuml)
  :config
  (setq org-plantuml-jar-path (expand-file-name "~/.tools/plantuml.jar")))
#+END_SRC
** Org-Mind-Map
#+BEGIN_SRC emacs-lisp
(use-package org-mind-map
  :init
  (require 'ox-org)
  ;; Uncomment the below if 'ensure-system-packages` is installed
  ;;:ensure-system-package (gvgen . graphviz)
  :config
  (setq org-mind-map-engine "dot")       ; Default. Directed Graph
  ;; (setq org-mind-map-engine "neato")  ; Undirected Spring Graph
  ;; (setq org-mind-map-engine "twopi")  ; Radial Layout
  ;; (setq org-mind-map-engine "fdp")    ; Undirected Spring Force-Directed
  ;; (setq org-mind-map-engine "sfdp")   ; Multiscale version of fdp for the layout of large graphs
  ;; (setq org-mind-map-engine "twopi")  ; Radial layouts
  ;; (setq org-mind-map-engine "circo")  ; Circular Layout
  )
#+END_SRC
** Gnuplot
#+BEGIN_SRC emacs-lisp
(use-package gnuplot
  :config
  (setq gnuplot-program "gnuplot"))
#+END_SRC
** Deft
#+BEGIN_SRC emacs-lisp
(defun my-deft/strip-quotes (str)
  (cond ((string-match "\"\\(.+\\)\"" str) (match-string 1 str))
        ((string-match "'\\(.+\\)'" str) (match-string 1 str))
        (t str)))

(defun my-deft/parse-title-from-front-matter-data (str)
  (if (string-match "^title: \\(.+\\)" str)
      (let* ((title-text (my-deft/strip-quotes (match-string 1 str)))
             (is-draft (string-match "^draft: true" str)))
        (concat (if is-draft "[DRAFT] " "") title-text))))

(defun my-deft/deft-file-relative-directory (filename)
  (file-name-directory (file-relative-name filename deft-directory)))

(defun my-deft/title-prefix-from-file-name (filename)
  (let ((reldir (my-deft/deft-file-relative-directory filename)))
    (if reldir
        (concat (directory-file-name reldir) " > "))))

(defun my-deft/parse-title-with-directory-prepended (orig &rest args)
  (let ((str (nth 1 args))
        (filename (car args)))
    (concat
      (my-deft/title-prefix-from-file-name filename)
      (let ((nondir (file-name-nondirectory filename)))
        (if (or (string-prefix-p "README" nondir)
                (string-suffix-p ".txt" filename))
            nondir
          (if (string-prefix-p "---\n" str)
              (my-deft/parse-title-from-front-matter-data
               (car (split-string (substring str 4) "\n---\n")))
            (apply orig args)))))))

(provide 'my-deft-title)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package deft
  :bind (("<f8>" . deft))
  :commands (deft deft-open-file deft-new-file-named)
  :config
  (setq deft-directory "~/Dropbox/org/"
        deft-auto-save-interval 0
        deft-use-filename-as-title nil
        deft-current-sort-method 'title
        deft-recursive t
        deft-extensions '("md" "txt" "org")
        deft-markdown-mode-title-level 1
        deft-file-naming-rules '((noslash . "-")
                                 (nospace . "-")
                                 (case-fn . downcase))))
(require 'my-deft-title)
(advice-add 'deft-parse-title :around #'my-deft/parse-title-with-directory-prepended)
#+END_SRC
** Elfeed
#+BEGIN_SRC emacs-lisp
(use-package elfeed
  :config
  (setq elfeed-db-directory "~/.elfeed/"))

(use-package elfeed-org
  :config
  (setq rhm-elfeed-org-files (list "~/.elfeed/elfeed.org")))

(require 'elfeed)
(require 'elfeed-org)
(elfeed-org)
(after! org (setq rmh-elfeed-org-files (list "~/.elfeed/elfeed.org")
                  elfeed-db-directory "~/.elfeed/"))
#+END_SRC
** Org-Clock-Switch
#+BEGIN_SRC emacs-lisp
(defun org-clock-switch ()
  "Switch task and go-to that task"
  (interactive)
  (setq current-prefix-arg '(12)) ; C-u
  (call-interactively 'org-clock-goto)
  (org-clock-in)
  (org-clock-goto))
(provide 'org-clock-switch)
#+END_SRC
** TODO Org-Rifle
:PROPERTIES:
:ID:       3256ce1c-aa68-4b99-823c-4c8fd6545c0b
:END:

I'll want to add some of my own custom rifle actions here.

#+BEGIN_SRC emacs-lisp
#+END_SRC
** Update Tickboxes
#+BEGIN_SRC emacs-lisp
(defun org-update-cookies-after-save()
  (interactive)
  (let ((current-prefix-arg '(4)))
    (org-update-statistics-cookies "ALL")))

(add-hook 'org-mode-hook
          (lambda ()
            (add-hook 'before-save-hook 'org-update-cookies-after-save nil 'make-it-local)))
(provide 'org-update-cookies-after-save)
#+END_SRC
** Zyrohex/org-tasks-refile
#+BEGIN_SRC emacs-lisp
(defun zyrohex/org-tasks-refile ()
  "Process a single TODO task item."
  (interactive)
  (call-interactively 'org-agenda-schedule)
  (org-agenda-set-tags)
  (org-agenda-priority)
  (let ((org-refile-targets '((helm-read-file-name :maxlevel .6)))
        (call-interactively #'org-refile))))
(provide 'zyrohex/org-tasks-refile)
#+END_SRC
** Zyrohex/org-reference-refile
#+BEGIN_SRC emacs-lisp
(defun zyrohex/org-reference-refile (arg)
  "Process an item to the reference bucket"
  (interactive "P")
  (let ((org-refile-targets '(("~/.gtd/references.org" :maxlevel . 6))))
    (call-interactively #'org-refile)))
(provide 'zyrohex/org-reference-refile)
#+END_SRC
** Zyrohex/org-notes-refile
#+BEGIN_SRC emacs-lisp
(defun zyrohex/org-notes-refile ()
  "Process an item to the references bucket"
  (interactive)
  (let ((org-refile-targets '(("~/.gtd/references.org" :maxlevel . 6)))
        (org-refile-allow-creating-parent-nodes 'confirm))
    (call-interactively #'org-refile)))
(provide 'zyrohex/org-notes-refile)
#+END_SRC
** WSL Browser
#+BEGIN_SRC emacs-lisp
(defun my--browse-url (url &optional _new-window)
  ;; new-window ignored
  "Opens link via powershell.exe"
  (interactive (browse-url-interactive-arg "URL: "))
  (let ((quotedUrl (format "start '%s'" url)))
    (apply 'call-process "/mnt/c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe" nil
           0 nil
           (list "-Command" quotedUrl))))

(setq-default browse-url-browser-function 'my--browse-url)
#+END_SRC
* Super Agenda Groups
#+BEGIN_SRC emacs-lisp
(org-super-agenda-mode t)
(after! org-agenda (setq org-agenda-custom-commands
                         '(("t" "Tasks"
                            ((agenda ""
                                     ((org-agenda-files '("~/Dropbox/org/tasks.org" "~/Dropbox/org/tickler.org" "~/Dropbox/org/projects.org"))
                                      (org-agenda-overriding-header "What's on my calendar")
                                      (org-agenda-span 'day)
                                      (org-agenda-start-day (org-today))
                                      (org-agenda-current-span 'day)
                                      (org-super-agenda-groups
                                       '((:name "[[~/Dropbox/org/habits.org][Habits]]"
                                                :habit t
                                                :order 1)
                                         (:name "[[~/Dropbox/org/recurring.org][Bills]]"
                                                :tag "@bills"
                                                :order 4)
                                         (:name "Today's Schedule"
                                                :time-grid t
                                                :scheduled t
                                                :deadline t
                                                :order 13)))))
                             (todo "TODO|NEXT|REVIEW|WAITING|IN-PROGRESS"
                                   ((org-agenda-overriding-header "[[~/Dropbox/org/tasks.org][Task list]]")
                                    (org-agenda-files '("~/Dropbox/org/tasks.org"))
                                    (org-super-agenda-groups
                                     '((:name "CRITICAL"
                                              :priority "A"
                                              :order 1)
                                       (:name "NEXT UP"
                                              :todo "NEXT"
                                              :order 2)
                                       (:name "Emacs Reading"
                                              :and (:category "Emacs" :tag "@read")
                                              :order 3)
                                       (:name "Emacs Config"
                                              :and (:category "Emacs" :tag "@configure")
                                              :order 4)
                                       (:name "Emacs Misc"
                                              :category "Emacs"
                                              :order 5)
                                       (:name "Task Reading"
                                              :and (:category "Tasks" :tag "@read")
                                              :order 6)
                                       (:name "Task Other"
                                              :category "Tasks"
                                              :order 7)
                                       (:name "Projects"
                                              :category "Projects"
                                              :order 8)))))
                             (todo "DELEGATED"
                                   ((org-agenda-overriding-header "Delegated Tasks by WHO")
                                    (org-agenda-files '("~/Dropbox/org/tasks.org"))
                                    (org-super-agenda-groups
                                     '((:auto-property "WHO")))))))
                           ("i" "Inbox"
                            ((todo ""
                                   ((org-agenda-files '("~/Dropbox/org/inbox.org"))
                                    (org-agenda-overriding-header "Items in my inbox")
                                    (org-super-agenda-groups
                                     '((:auto-ts t)))))))
                           ("x" "Get to someday"
                            ((todo ""
                                        ((org-agenda-overriding-header "Projects marked Someday")
                                         (org-agenda-files '("~/Dropbox/org/someday.org"))
                                         (org-super-agenda-groups
                                          '((:auto-ts t))))))))))
#+END_SRC
* Dired listing sort by time
#+begin_src emacs-lisp
(setq dired-listing-switches "-aBhlt --group-directories-first")
#+end_src

Note, in the above code block,  :tangle yes cannot be used.
Otherwise, only this code block is generated in config.el

Also note, the change of setting may not be necessary, as in the dired buffer,
one can use key o to toggle between sort by time or by name.
